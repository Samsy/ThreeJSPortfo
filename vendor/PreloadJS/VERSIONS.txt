Version NEXT [Not Released]
************************************************************************************************************************
CRITICAL (may break existing content)
- Completely revisited how file paths are parsed. The new version is much less aggressive, and should be more reliable
	and simple to edit.

****
- Fixed issue with erroneous fileload events when manually changing the src property of an image loaded with PreloadJS.
- Refactored XMLHTTP fallback for old IE
- Added "headers" property on load items, which is injected into XHR request headers
- Added support for an optional "maintainOrder" property on load items, which makes PreloadJS ensure they get loaded in
	order. Items other than tag-loaded scripts will be loaded at any time (depending on the setMaxConnections() value,
	however they will always finish in the order specified.
- Added bower support, including grunt task for updating the bower.json
- Fixed issues with tag-loaded files preloaded before the body tag is available


Version 0.4.1 [December 12, 2013]
************************************************************************************************************************
CRITICAL (may break existing content)
- Single files that are NOT manifests can no longer be loaded using loadManifest(). Use loadFile instead.
- Items have relevant path/basePaths prepended to the src. Auto-generated IDs will include a path (from a manifest),
 	but not a basePath.
- LOAD_TIMEOUT changed to loadTimeout. LOAD_TIMEOUT is deprecated, but still supported in this version.

****
- Changed XHR-loaded scripts to automatically add to the document body after loading
- Added SamplePlugin class to assist with updated plugin documentation
- Fixed the rawResult when loading XML
- Deprecated the "basePath" argument on loadFile() and loadManifest() methods
- Added file-based manifest support. Supported approaches include loading a single JSON/JSONP file, or a JavaScript
 	object that defines a manifest of files, as well as an optional "path" property, which is prepended to each file in
 	the list (in addition to the queue's basePath).
- Lots of minor fixes to code, including formatting and clean up.
- Added file-based manifest support. Loading a single JSON file that defines a manifest object will
	automatically load the files in the manifest. Included a sample.
- Changed all text load types to be UTF-8 encoded.
- AbstractLoader changed to extend EventDispatcher, instead of using a mix-in.
- Major documentation pass.
- Fixed issue with XHR scripts and maxConnections.
- Added an argument to LoadQueue to specify a crossOrigin property on images tags generated by PreloadJS.
- included a sample htaccess file in /extras that can be used to serve CORS-safe images.
- added willTrigger method to EventDispatcher
- Wrapped XML parsing in a try/catch. CocoonJS doesn't support it, and Opera has occasional issues with XML.


Version 0.4.0 [September 25, 2013]
************************************************************************************************************************
CRITICAL (may break existing content):
- removed all onEvent handlers (ex. onClick, onTick, onAnimationEnd, etc)
- updated EventDispatcher with latest bubbling model, and the Event class

****
- implemented createjs Utils
- implemented "use strict" mode
- Fixed issue where a null parameter would cause remove() to reset a queue (removeAll)
- Fixed documentation where JSONP was doc'd as a second JSON
- Added description about file types to main LoadQueue description, including example.
- Fixed edge case where an unmatched file pattern would cause errors
- Handled cases with no extension
- Fixed an issue with EventDispatcher when adding the same listener to an event twice
- Updated the build process to use NodeJS & Grunt.js. Please refer to the readme in the build folder.


Version 0.3.1 [May 10, 2013]
****************************************************************************************************
- Fix for removeAll method error
- Updated file validation RegExp. Supports double-byte characters, prevents partial matches, better
	support for relative paths, improved matching of domains, and modified the "file name" match to
	include the extension (file.mp3 instead of file). The match arguments have not changed otherwise.
	Also used the "extended" argument to make the pattern more readable.
- Extension comparisons are now case-insensitive
- Added getAllResponseHeaders() and getResponseHeader() to XHRLoader
- Added loader parameter to LoadQueue's fileload event.
- Added support for JSONP. Requires a "callback" parameter on the load item that maps to the JSONP callback
- Now setting the result object to any JSON parse errors that occur.
- Now allowing GET and POST requests. Pass a new values option when loading a file to send that data
	as a GET. For a POST request set the new method value to POST.
- Fixed an issue where setting max connections on an empty queue would trigger a complete event.
- Added a "filestart" event (thanks zvxy)
- Fixed naming of the "loadstart" event (used to be "loadStart")
- Added support for a "basePath" parameter on LoadQueue constructor, and loadFile and loadManifest
	methods, which will prepend a path onto all file loads without modifying the load item. Updated
	all demos to use the new approach. Note that paths with a protocol (http://) will ignore basePath.
- Added a public method "buildPath" to AbstractLoader, which compiles a full source path using a path,
	basePath, and query object
- Fixed documentation on progress and fileprogress to display the right property name for progress
- Fixed AbstractLoader progress event to include the progress property.
- Fixed IE7/8/9 support for SVG, XML, and other load events.
- Fixed proxy so deprecated method doesn't override the global one.
- Fixed several IE 6-8 bugs.
- Fixed svg flickering while loading on Opera.
- Fixed issue where operations such as setMaxConnections would unpause a queue


Version 0.3.0 [Feb 12, 2013]
****************************************************************************************************
- Class name changed from createjs.PreloadJS to createjs.LoadQueue.
- Added versions file that is automatically updated via the build process, which provides run-time
	version information on the new PreloadJS object
- Migrated to new NodeJS-based doc/build process
- Added version file, which is updated via the build process, and injects build date and version
	into the PreloadJS object
- Added JSDocs to all protected and private methods, and expanded documentation considerably
- Added indexOf shim and HTMLAudioElement check to provide IE7/8 support
- Changed internal proxy method to live on createjs namespace, and support additional parameters.
- Added methods to clear and reset the preload queue (remove, removeAll, and reset)
- Changed how the XHR level is determined
- Changed how request responses in XHR are determined
- Changed XHR loading for SCRIPT and CSS tags to inject into tags, instead of reloading them
- Added tag-based loading of SCRIPT, SVG, and CSS tags. Note that Scripts can only be loaded one
	at a time to maintain load order when using tags.
- Removed XHR-loading of AUDIO tags for use with HTMLAudioElement (can not properly preload)
- Added BINARY file type and enabled plugin-overriding of types
- Added better file name parsing via RegExp
- Added CreateJS EventDispatcher support, and updated demos to use events.
- Added rawResult, which is the unformatted result loaded via XHR. Update the getResult method toreturn
	it (optionally).
- Changed how event objects are constructed. Events now contain an "item" property, which contains
	the initially requested object. The items contain a "result" property which points
	to the loaded & parsed content, as well as a "rawResult".
- Internal reorganization of entire library
- Much more thorough documentation and examples
- Moved onFileLoad and onFileProgress event/handlers from AbstractLoader to PreloadJS
- Added parsing of XML, JSON, and JavaScript files to return formatted results
- Added setUseXHR method to provide proper xhr setting after a queue is created.


Version 0.2.0 [Aug 24, 2012]
****************************************************************************************************
- moved all classes into a configurable createjs namespace
- added support for preloading SVG files
- Fixed issues with loading in mobile (Android) browsers
- Fixed various loading issues throughout
- added tag-based fallback for images loaded with XHR that fail due to local restrictions
- Canceling loads now prevents complete, error, and other callbacks from firing.
- Unloaded code in IE9/10 will not cause RTE when asynchronous callbacks occur.


Version 0.1.0 [Apr 2, 2012]
****************************************************************************************************
Initial release.
